
第一步：自报家门，
	git config --global user.name "输入你的用户名"
	git config --global user.email "输入你的邮箱"
	
第二步：
	找一个空文件夹
	git init  #声明这个文件夹被占领
	
	然后你可以写代码，
	
	git status 查看状态

第三步：（写好代码以后）

	git add . #将所有更改过的文件写入内存
	git commit -m '版本说明文字'  #生成版本
	
	继续写代码，发现写炸了，回滚到刚才的版本
	
第四步：（回滚）
	
	git log  或者 git reflog #查看版本号
	
	git reset --hard 版本号 #切换版本
	
	继续 。。。。
	
第五步：（上传到远程库，给队友看看）
	
	git push 远程连接 分支  #输入你的用户名和密码
	

第二天早晨上班发现你的队友半夜更新了送程库：

	git pull 远程连接 分支
	
	#继续编。。。。
	
第三天电脑坏了启动不起来了，借了一台电脑：
	
	git clone 远程连接
	
	#继续编。。。。正写的一半，老妖精打电脑，说是这个项目出了个大BUG,你马上修复那个BUG要把现在写的保存一个分支
	
	git brance '老妖精'       查看分支线
	git branch name  创建新支线
	git checkout '老妖精'  切换支线
	git add .
	git commit -m '老妖精喊我'
	
	git push 远程连接 老妖精
	
	git checkout master
	#修改BUG commit 
	
第四天 续编昨天‘老妖精喊我’的那个支线：

	。。。。终于编完了
	
	commit 一波
	
	git checkout master
	git merge 老妖精
	
	git push 远程连接 master
	
	

推项目：

git init

git add .
 
git commit -m "名字"


git remote 看路径

没路径 git remote add 命名 +http：

git push 命名 master

成功

最常用的 git 命令有：
   add        添加文件内容至索引
   bisect     通过二分查找定位引入 bug 的变更
   branch     列出、创建或删除分支
   checkout   检出一个分支或路径到工作区
   clone      克隆一个版本库到一个新目录
   commit     记录变更到版本库
   diff       显示提交之间、提交和工作区之间等的差异
   fetch      从另外一个版本库下载对象和引用
   grep       输出和模式匹配的行
   init       创建一个空的 Git 版本库或重新初始化一个已存在的版本库
   log        显示提交日志
   merge      合并两个或更多开发历史
   mv         移动或重命名一个文件、目录或符号链接
   pull       获取并合并另外的版本库或一个本地分支
   push       更新远程引用和相关的对象
   rebase     本地提交转移至更新后的上游分支中
   reset      重置当前HEAD到指定状态
   rm         从工作区和索引中删除文件
   show       显示各种类型的对象
   status     显示工作区状态
   tag        创建、列出、删除或校验一个GPG签名的 tag 对象

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	