创建dataframe的语法：
	1、传入字典   index定义行索引  
	2、传入列表   index定义行索引   columns 定义列标题
给dataframe设定多个索引   pd.MultiIndex.from_tuples([('d',1),('d',2),('e',2)]，names(索引的名字))

pd.melt(dataframe) 改变形状 列变行
pd.pivot(columns = '',values = '')  行变列   形状和最初不一样
合并：
	pd.concat(dataframe,dataframe)  合并两个dataframe  默认以行合并   ignort_index = True 忽略行索引 按照顺序执行

	pd.concat(dataframe,dataframe)  合并两个dataframe  以列合并  以列表的形式传入 
	
	axis = 0   以列合并   默认为0
	axis  =1   以行合并   

排序：
	df.sort_values('columns')   按列的值排序  从低到高  默认升序

	df.sort_values('columns',ascending = False)   按列排序，从高到低  降序

	df.sort_index()  按照索引排序  传入 ascending  是降序排列

	df.sort_index(axis = 1)  按照列索引排序

	df.drop(columns=['A','B'])   删除指定的列   

子集的操作：
	df[df.A>3]  返回A列大于3的所有行内容
	
	df.drop_duplicates()   删除重复的行  
	
	df.head(n)  选择返回前n行   默认返回5行

	df.tail(n)   选择返回最末端n行   默认返回5行
	
	df.sample(face = 0.5) 随机选取部分行

	df.sample(n)  随机选取n行

	loc  iloc   at  iat
	
	索引行的时候使用
	loc：索引行标签  返回整行数据
	iloc：索引行索引  后面跟是数字  返回整行数据
	at  ：索引行标签， 返回单个值
	iat： 与iloc一样  索引行索引  传两个参数  列和行 返回单个值

	df.nlargest(n,'columns')  降序排列  返回n行最大的

	df.nsmallest(n,'columns') 返回n行最小的

	df.filter(regex = '')  正则表达式 ：\.  匹配包含句号的字符串
				  \d*  匹配所有数字

	df.isin(values)   返回布尔值   检测values是否在前边得df中

	pd.isnull(dataframe/series)  返回布尔值类型   检测值是否为nan
	pd.notnull(dataframe/series) 返回布尔值类型  检测值是不是nan  是得话返回False  不是返回True

	df.any()  有一个True  就是True
	df.all() 有一个false就是false


更改索引名称：
	df.rename(columns = {'旧列名':'新列名'})

总结数据
	df['a'].value_counts()  索引a列  统计出a列所有值在本列出现的次数 行同样 
	
	len(df)  计算df的长度   行数

	df['a'].nunique()    返回指定列中 不同的值有多少个  行同样

	df.describe()   统计出dataframe中的描述性统计

处理缺失的数据：
	df.dropna()   删除任何含有 NA/null 元素的列
	
	df.fillna()   用值替换掉所有 NA/null  的数据

df.assign(变量名 = lambda df: df.A*df.B)  assign 分配  指定  增加一列数据    返回带有新列的dataframe
	改变原来的df

df['col'] = df.a*df.b    不改变原来的df   

pd.qcut(df.col,n,labels = False)  将指定列的数据放入n个桶中  

df.max(axis = 0)  每列最大的数  min同样
df.max(axis = 1)  每行最大的数  min同样

df.clip(lower = 8,upper = 10)  调整dataframe值得范围   lower最小   upper最大   不改变原来得df

df.abs()   返回dataframe 得绝对值


groupby

df.groupby(by = 'col')   按照df的col分组   返回一个groupby对象   可通过list查看
df.groupby(level = '索引的级别int')  按照指定索引级别分组    多索引


df.groupby('a').size()  返回组的大小

df.agg(function)    传入一个方法   max  min  mean等  也可以按照列表传入  按列查询
df.agg(['min','max']）



df.shift()   对齐从上到下      df.shift(-1)从下到上

df.rank(method = 'dense')  从小到大排名  
df.rank(method = 'min')  从小到大排名  效果与  dense 相同
df.rank(method = 'first')  从小到大排名  三个效果一样

df.rank(pct = True)   按照百分比排序

df.cumsum()   累加和  以列累加
df.cumsum(axis = 1)  以行累加

df.cummax()  累积最大值   相比较  较大的覆盖小的   列相比较 
df.cummax(axis = 1)    以行比较
df.cummin()  同样

df.cumprod() 累积乘   以列相乘  
df.cumprod(axis = 1)  以行相乘

pd.merge(df,df1,how = 'left',on = 'x1')   以靠左的df为准   只取左边的df有的内容   
	           how = 'right',     以靠右的df为准，  只取右边的df中有的内容  
	           how = 'inner'      只取相同部分的内容
	           how = 'outer'      各自都有的内容   相同的合并



adf[~adf.x1.isin(bdf.x1)]    

adf[adf.x1.isin(bdf.x1)]   













